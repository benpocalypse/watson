#!/usr/bin/env bash

######################################################################
#
# Watson version 1.0
#
# “It’s elementary, my dear…”
#
# Watson helps you set up your new elementary OS Vala app.
#
# For details, please see:
# https://github.com/small-tech/watson
#
# Follows the Community Bash Style Guide.
# https://github.com/azet/community_bash_style_guide
#
# Copyright ⓒ 2021-present Aral Balkan (https://ar.al)
# Small Technology Foundation (https://small-tech.org)
#
# Like this? Fund us!
# https://small-tech.org/fund-us
#
# Released under GNU GPL version 3.0.
#
######################################################################

# set -eu -o pipefail

dryRun=false

function show_help () {
  echo 'Usage: watson [--dryrun|-d|--help|-h]'
  exit
}

function dry_run () {
  dryRun=true
  echo '⧼⧼⧼⧼⧼ Dry run ⧽⧽⧽⧽⧽'
  echo ''
  echo "Will carry out substitutions, present diff, and exit."
  echo 'Revert using: git reset --hard HEAD'
}

[[ $1 == '--dry-run' || $1 == '-d' ]] && dry_run
[[ $1 == '--help' || $1 == '-h' ]] && show_help

current_step=0
steps=('GitHub Details' 'App Details (1/2)' 'App Details (2/2)' 'Copyright Details' 'Parse responses' 'Perform substitutions' 'Rename files' 'Delete self' 'Recreate git repository' 'Exit')

# Trap errors and handle them gracefully.
#
# $1: Line number of error.
# $2: Exit code of command that failed.
function handle_error () {
  printf "Step %d (%s)" $((${current_step}+1)) "${steps[${current_step}]}"
  if ((current_step < 4)); then
    printf " cancelled.\n"
  else
    printf " failed on line $1.\n"
  fi
  exit $2
}
trap 'handle_error ${LINENO} $? ' ERR

# Constants

readonly copyright_year=$(date '+%Y')

# Github details.
github_details_pipe_separated=$(zenity --forms --width=300 --title="Watson" --text="\n  <big><u>GitHub details</u></big>  \n\n  <i>https://github.com/<big>‹Organisaton›</big>/<big>‹App›</big></i>\n" --add-entry="Organisation:" --add-entry="App:")

current_step=$(( current_step + 1 ))

echo ${github_details_pipe_separated}

# Get app details (1/2).
app_details_pipe_separated=$(zenity --forms --height=260 --title="Watson" --text="\n  <big><u>App details (1/2)</u></big>" --add-entry="Name:" --add-entry="Generic Name (e.g., Web Browser):" --add-entry="Description" --add-entry="Tooltip text (comment)" --add-entry="Keywords (separated;by;semicolons)")

echo ${app_details_pipe_separated}

current_step=$(( current_step + 1 ))

# Get app details (2/2) – categories (multi-select list).
app_categories=$(zenity --list --width=400 --height=460 --multiple --separator=";" --title="Watson" --text="\n  <big><u><b>App Details (2/2)</b></u></big>\n\n  <i>You may select more than one.\n</i>" --column="Category" "AudioVideo" "Audio" "Video" "Development" "Education" "Game" "Graphics" "Network" "Office" "Science" "Settings" "System" "Utility")

echo ${app_categories}

current_step=$(( current_step + 1 ))

# Get copyright details.
copyright_details_pipe_separated=$(zenity --forms --width=300 --title="Watson" --text="\n  <big><u>Copyright Details</u></big>  \n\n  <i>Copyright ⓒ ${copyright_year}-present <big>‹Name›</big> <big>‹Email›</big></i>\n" --add-entry="Name" --add-entry="Email")

current_step=$(( current_step + 1 ))

# Parse the pipe-separated results returned from the Zenity dialogues into bash arrays.
IFS='|' read -ra github_details <<< "${github_details_pipe_separated}"
IFS='|' read -ra app_details <<< "${app_details_pipe_separated}"
IFS='|' read -ra copyright_details <<< "${copyright_details_pipe_separated}"

# We replace any dashes in the desktop entry names with underscores for
# compatibility with D-Bus names. See:
# https://specifications.freedesktop.org/desktop-entry-spec/latest/ar01s02.html
#
# TODO: Also handle edge case of names that begin with numbers? (Prefix with an underscore.)
github_organisation_original=${github_details[0]}
github_app_original=${github_details[1]}
github_organisation=${github_organisation_original//'-'/'_'}
github_app=${github_app_original//'-'/'_'}

app_name=${app_details[0]}
app_generic_name=${app_details[1]}
app_description=${app_details[2]}
app_comment=${app_details[3]}
app_keywords=${app_details[4]}

copyright_name=${copyright_details[0]}
copyright_email=${copyright_details[1]}

current_step=$(( current_step + 1 ))

# This is the list of files to carry out substituions in.
files=('com.github.ORG.APP.yml' 'meson.build' '_README.md' 'src/Application.vala' 'data/APP.appdata.xml.in' 'data/APP.desktop.in' 'data/gresource.xml' 'data/gschema.xml' 'po/POTFILES')

# Carry out substitutions in configuration files and source code.
for file in "${files[@]}"; do
  sed -i "s/{GITHUB.ORG}/${github_organisation}/g" "${file}"
  sed -i "s/{GITHUB.APP}/${github_app}/g" "${file}"
  sed -i "s/{APP.NAME}/${app_name}/g" "${file}"
  sed -i "s/{APP.GENERIC_NAME}/${app_generic_name}/g" "${file}"
  sed -i "s/{APP.DESCRIPTION}/${app_description}/g" "${file}"
  sed -i "s/{APP.COMMENT}/${app_comment}/g" "${file}"
  sed -i "s/{APP.CATEGORIES}/${app_categories}/g" "${file}"
  sed -i "s/{APP.KEYWORDS}/${app_keywords}/g" "${file}"
  sed -i "s/{COPYRIGHT.YEAR}/${copyright_year}/g" "${file}"
  sed -i "s/{COPYRIGHT.NAME}/${copyright_name}/g" "${file}"
  sed -i "s/{COPYRIGHT.EMAIL}/${copyright_email}/g" "${file}"
done

current_step=$(( current_step + 1 ))

# Rename files.
mv _README.md README.md
mv _CHANGELOG.md CHANGELOG.md
mv com.github.ORG.APP.yml "com.github.${github_organisation}.${github_app}.yml"
mv data/APP.appdata.xml.in "data/${github_app}.appdata.xml.in"
mv data/APP.desktop.in "data/${github_app}.desktop.in"

current_step=$(( current_step + 1 ))

# If this is a dry run (useful when developing/testing Watson itself),
# then display a diff of what Watson has changed and exit without
# removing watson or replacing the git repository.
if ${dryRun}; then
  git diff
  exit
fi

# Delete self (goodbye, cruel world!)
rm watson

current_step=$(( current_step + 1 ))

# Delete existing git repository and set up the one specific to the app.
rm -rf .git
git init
git remote add origin "git@github.com:${github_organisation_original}/${github_app_original}.git"
git add --all
git commit -m "Initial add"

current_step=$(( current_step + 1 ))

# That’s it!
